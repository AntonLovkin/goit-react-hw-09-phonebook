{"version":3,"sources":["redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Contact-form/Contact-form.js","components/Filter.js","components/Contacts/Contacts-list.js","views/ContactsView.js"],"names":["name","number","dispatch","contact","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","a","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getFilter","state","contacts","filter","getAllContacts","items","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useDispatch","useState","setState","handleChange","target","value","prev","reset","contactsOperations","fetchContacts","className","onSubmit","evt","preventDefault","onChange","placeholder","type","pattern","title","required","Filter","useCallback","changeFilter","useSelector","contactsSelectors","ContactsList","filteredContacts","map","onClick","ContactsView"],"mappings":"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","file":"static/js/3.62977efe.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError\r\n} from './contacts-actions'\r\n\r\n// axios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n\r\n        dispatch(fetchContactsSuccess(data))\r\n\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error))\r\n    }\r\n\r\n    // axios\r\n    //     .get(`/contacts`)\r\n    //     .then(({data}) => dispatch(fetchContactsSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactsError(error)))\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n        // completed: false,\r\n    };\r\n      \r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)))\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(deleteContactSuccess(id)))\r\n        .catch(error => dispatch(deleteContactError(error)))\r\n};\r\n\r\nexport default {addContact, deleteContact, fetchContacts}","import { createSelector } from \"reselect\";\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// const getFilteredContacts = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return contacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// }\r\n\r\nconst getFilteredContacts = createSelector(\r\n    [getAllContacts, getFilter], (contacts, filter) => {\r\n      const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );  \r\n    })\r\n\r\nexport default { getFilter, getFilteredContacts, getAllContacts }","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\nimport \"../base.css\";\nimport \"../Contact-form/contact-form.css\";\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onSubmit: (name, number) =>\n//     dispatch(contactsOperations.addContact(name, number)),\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts())\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\n\nexport default function ContactForm () {\n  const initialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  // componentDidMount() {\n  //   this.props.fetchContacts()\n  // }\n\n  const dispatch = useDispatch();\n  const [state, setState] = useState(initialState);\n  const onSubmit = (name, number) => dispatch(contactsOperations.addContact(name, number));\n  \n  // const contacts = useSelector(state => contactsSelectors.getAllContacts(state));\n  const fetchContacts = (name, number) => dispatch(contactsOperations.fetchContacts(name, number));\n\n  const handleChange = ({ target: { name, value } }) => {\n    setState(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    const { name, number } = state;\n \n    onSubmit(name, number);\n   \n    reset();\n  };\n\n  const reset = () => {\n    setState(prev  => ({ ...prev, name: \"\", number: \"\" }));\n  };\n\n  // const addNoRepeatContact = (state, contacts) => {\n  //   const { name, number } = state;\n  //   if (\n  //     contacts.some(\n  //       contacts => contacts.name.toLowerCase() === name.toLowerCase(),\n  //     )\n  //   ) {\n  //     alert(`${name} is already in contacts`);\n  //     return;\n  //   }\n  //   if (contacts.some(contacts => contacts.number === number)) {\n  //     alert(`${number} is already in contacts`);\n  //     return;\n  //   }\n\n  //   onSubmit(state);\n  //   reset();\n  // };\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   addNoRepeatContact(state, contacts);\n  // };\n\n  fetchContacts();\n\n  const { name, number } = state;\n\n   return (\n      <form className=\"contacts-form\" onSubmit={handleSubmit}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            value={name}\n            onChange={handleChange}\n            placeholder=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\" \"\n            required\n          />\n        </label>\n\n        <label className=\"label\">\n          Number\n          <input\n            className=\"input\"\n            value={number}\n            onChange={handleChange}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button className=\"button add\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n}","import React, {useCallback} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {changeFilter} from '../redux/contacts/contacts-actions'\nimport contactsSelectors from '../redux/contacts/contacts-selectors'\n\n// const mapStateToProps = (state) => ({\n//   value: contactsSelectors.getFilter(state),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (evt) => dispatch(changeFilter(evt.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  const onChange = useCallback((evt) => {\n    dispatch(changeFilter(evt.target.value))\n  }, [dispatch]);\n  \n  const value = useSelector(contactsSelectors.getFilter);\n\n  return (\n   <div className=\"filter\">\n    <label className=\"label\">\n      Find contacts by name:\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      >\n      </input>\n    </label>\n  </div>\n);\n}","import React, { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport contactsOperations from '../../redux/contacts/contacts-operations'\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\nimport \"./contacts-list.css\";\n\n// const mapStateToProps = (state) => ({\n//   filteredContacts: contactsSelectors.getFilteredContacts(state),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n\nexport default function ContactsList() {\n  const dispatch = useDispatch();\n\n  // const onDeleteContact = useEffect((id) => {dispatch(contactsOperations.deleteContact(id))})\n  // const onDeleteContact = (id) => dispatch(contactsOperations.deleteContact(id));\n\n  const filteredContacts = useSelector(contactsSelectors.getFilteredContacts);\n  \n  return (\n  <ul className=\"contact-list\">\n    {filteredContacts.map(({ name, number, id }) => (\n      <li key={id} className=\"contact-item\">\n        <span className=\"contact-name\">{name} : </span>\n        <span className=\"contact-number\"> {number}</span>\n        <button\n          className=\"button contact-item__button\"\n          // onClick={onDeleteContact}\n          onClick={() => dispatch(contactsOperations.deleteContact(id))}\n          // onClick={() => onDeleteContact(id)}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n} ","import ContactForm from '../components/Contact-form';\r\nimport Filter from '../components/Filter';\r\nimport ContactsList from '../components/Contacts';\r\n\r\nconst ContactsView = () => {\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n\r\n        <h2>Filter</h2>\r\n        <Filter />\r\n\r\n        <h2>Contacts</h2>\r\n        <ContactsList />\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\nexport default ContactsView;"],"sourceRoot":""}