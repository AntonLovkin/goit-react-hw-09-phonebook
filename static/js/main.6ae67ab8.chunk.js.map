{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/auth/auth-operations.js","redux/auth/auth-actions.js","UserMenu/Navigation.js","redux/auth/auth-selectors.js","UserMenu/UserMenu.js","UserMenu/AuthNav.js","UserMenu/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/auth/auth-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","a","authActions","registerRequest","post","response","data","registerSuccess","registerError","message","logOut","logoutRequest","logoutSuccess","error","logoutError","logIn","loginRequest","loginSuccess","loginError","getCurrentUser","getState","persistToken","auth","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","to","exact","style","activeStyle","state","isAuthenticated","user","email","container","alignItems","avatar","marginRight","name","mapDispatchToProps","onLogout","authOperations","connect","authSelectors","src","alt","width","type","onClick","AuthNav","header","justifyContent","borderBottom","Component","component","redirectTo","routeProps","render","props","restricted","ContactsView","lazy","RegisterView","LoginView","App","this","onGetCurrentUser","fallback","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","items","createReducer","_","payload","map","includes","alert","filter","id","combineReducers","initialUserState","setError","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contacts","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6ae67ab8.chunk.js","sourcesContent":["// import types from \"./contacts-types\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n\n// export default {addContactRequest, addContactSuccess, addContactError, deleteContact, changeFilter };","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body { name, email, password }\r\n *\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n    \r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data))\r\n\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * POST @ /users/login\r\n * body:\r\n *    { email, password }\r\n *\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n    \r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data))\r\n\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  try {\r\n    axios.post('/users/logout');\r\n    \r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess())\r\n\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistToken },\r\n  } = getState();\r\n\r\n  if (!persistToken) {\r\n    return\r\n  }\r\n\r\n  token.set(persistToken);\r\n\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data))\r\n  } catch (error) {\r\n    \r\n    dispatch(authActions.getCurrentUserError(error.message))\r\n  }\r\n};\r\n\r\nexport default { register, logOut, logIn, getCurrentUser };","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n// import authSelectors from '../redux/auth/auth-selectors';\r\n// import { connect } from 'react-redux';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <NavLink\r\n      to=\"/contacts\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Контакты\r\n    </NavLink>\r\n      \r\n  </nav>\r\n);\r\n\r\n// const mapStateToProps = state => {\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state)\r\n// }\r\n\r\nexport default Navigation;","const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUsername = state => state.auth.user.email;\r\n\r\nexport default {\r\n    getIsAuthenticated,\r\n    getUsername\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\nimport authOperations from '../redux/auth/auth-operations';\r\n// import defaultAvatar from './default-avatar.png';\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    marginRight: 4,\r\n  },\r\n  name: {\r\n    fontWeight: 700,\r\n    marginRight: 12,\r\n  },\r\n};\r\n\r\nconst UserMenu = ({ avatar, name, onLogout }) => (\r\n  <div style={styles.container}>\r\n    <img src={avatar} alt=\"\" width=\"32\" style={styles.avatar} />\r\n    <span style={styles.name}>Welcome, {name}</span>\r\n    <button type=\"button\" onClick={onLogout}>\r\n      Logout\r\n    </button>\r\n  </div>\r\n);\r\nconst mapStateToProps = state => ({\r\n  name: authSelectors.getUsername(state),\r\n  // avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      to=\"/register\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink\r\n      to=\"/login\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Логин\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst styles = {\r\n  header: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottom: '1px solid #2A363B',\r\n  },\r\n};\r\n\r\nconst AppBar = ({ isAuthenticated }) => (\r\n  <header style={styles.header}>\r\n    \r\n    {isAuthenticated\r\n      ?\r\n      <>\r\n        <Navigation />\r\n        <UserMenu />\r\n        \r\n      </>\r\n      : <AuthNav />}\r\n        \r\n  </header>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n\r\n","import { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport authSelectors from \"../redux/auth/auth-selectors\";\r\n\r\nconst PrivateRoute = ({\r\n    component: Component,\r\n    isAuthenticated,\r\n    redirectTo,\r\n    ...routeProps\r\n}) => (\r\n    <Route\r\n        {...routeProps}\r\n        render={\r\n            props => isAuthenticated\r\n                ? <Component {...props} />\r\n                : <Redirect to={redirectTo} />\r\n        }\r\n    />\r\n);\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);","import { Switch } from 'react-router-dom';\nimport AppBar from './UserMenu/AppBar';\n// import ContactsView from './views/ContactsView';\n// import RegisterView from './views/RegisterView';\n// import LoginView from './views/LoginView';\nimport { Component, lazy, Suspense } from 'react';\nimport authOperations from './redux/auth/auth-operations';\nimport { connect } from 'react-redux';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\n\nconst ContactsView = lazy(() => import('./views/ContactsView'));\nconst RegisterView = lazy(() => import('./views/RegisterView'));\nconst LoginView = lazy(() => import('./views/LoginView'));\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n}\n\n  render() {\n    return (\n      <>\n        <AppBar />\n\n        <Suspense fallback={<p>Loading...</p>}>\n          <Switch>\n            <PublicRoute path=\"/register\" restricted component={RegisterView} redirectTo='/contacts'/>\n            <PublicRoute path=\"/login\" restricted component={LoginView} redirectTo='/contacts'/>\n            <PrivateRoute path=\"/contacts\" component={ContactsView} redirectTo='/login' />\n          </Switch>\n        </Suspense>\n      </>\n    );\n  }\n}\n  \nconst mapDispatchToProps = {\n  onGetCurrentUser: authOperations.getCurrentUser\n}\n\nexport default connect(null, mapDispatchToProps)(App);","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport {\n    addContactSuccess,\n    deleteContactSuccess,\n    fetchContactsSuccess,\n    changeFilter\n} from './contacts-actions'\n// import actions from \"./contacts-actions\";\n// import types from \"./contacts-types\";\n\n// console.log(actions.addContact.type);\n\nconst items = createReducer(([]), {\n  [fetchContactsSuccess]: (_, {payload}) => payload,\n  [addContactSuccess]: (state, { payload }) => {\n    if (state.map(({ name }) => name).includes(payload.name)) {\n      alert(`${payload.name} is already in contacts`);\n      // console.log(payload.name);\n      return \n    } \n      return [payload, ...state];\n    \n  },\n\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {})\n\nexport default combineReducers({\n  items,\n  filter,\n  error\n});\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, {payload}) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, {payload}) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n   [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n})\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\nimport authReducer from \"./auth/auth-reducer\";\n\n// const myMiddleware = store => next => action => {\n//   console.log('My middleware');\n// }\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n logger\n  // myMiddleware\n];\n\nconst authPersistConfig = {\n  key: \"auth\",\n  storage,\n  whitelist: [\"token\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\nexport default {store, persistor};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}